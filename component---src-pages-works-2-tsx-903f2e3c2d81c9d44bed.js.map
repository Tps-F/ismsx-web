{"version":3,"file":"component---src-pages-works-2-tsx-903f2e3c2d81c9d44bed.js","mappings":"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","sources":["webpack://isshin/./src/components/header.tsx","webpack://isshin/./src/components/worksGrid2.tsx","webpack://isshin/./src/pages/works2.tsx","webpack://isshin/./src/utils/database.ts","webpack://isshin/./src/utils/sort.ts"],"sourcesContent":["import React from \"react\";\nimport { useLocation } from \"@reach/router\";\nimport { Link } from \"gatsby\";\ninterface HeaderProps {\n\tcolors?: string[];\n}\n\nconst Header: React.FC<HeaderProps> = ({ colors = [] }) => {\n\tconst location: string = useLocation().pathname.replace(/\\//g, \"\");\n\treturn (\n\t\t<>\n\t\t\t<div className=\"px-4 py-2 text-center text-sm font-semibold text-gray-500 outline-none ring-indigo-300 transition duration-100 hover:bg-gray-100 focus-visible:ring active:bg-gray-200 md:px-8 md:py-3 md:text-base\">\n\t\t\t\t<div\n\t\t\t\t\tclassName={`mb-4 tracking-widest ${\n\t\t\t\t\t\tcolors[0] || \"text-works\"\n\t\t\t\t\t} text-right text-xl`}\n\t\t\t\t>\n\t\t\t\t\t<Link\n\t\t\t\t\t\tto={location === \"\" ? \"works\" : \"/works\"}\n\t\t\t\t\t\tclassName={`${location === \"works\" ? \"bg-textbg\" : \"\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\tworks\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName={`mb-4 tracking-widest ${\n\t\t\t\t\t\tcolors[1] || \"text-about\"\n\t\t\t\t\t} text-right text-xl`}\n\t\t\t\t>\n\t\t\t\t\t<Link\n\t\t\t\t\t\tto={location === \"\" ? \"about\" : \"/about\"}\n\t\t\t\t\t\tclassName={`${location === \"about\" ? \"bg-textbg\" : \"\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\tabout\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`mb-4 tracking-widest ${\n\t\t\t\t\t\tcolors[2] || \"text-primary\"\n\t\t\t\t\t} text-right text-xl`}\n\t\t\t\t>\n\t\t\t\t\t<a>contact</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport { database } from \"../utils/database\";\nimport { sortByDate } from \"../utils/sort\";\n\nconst WorksGrid = () => {\n\tconst [works, setWorks] = useState<any[]>([]);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst { getWorks } = database();\n\t\t\t\tconst data = await getWorks();\n\t\t\t\tsetWorks(data.sort(sortByDate));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Error fetching works:\", (error as Error).message);\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"grid gap-x-4 gap-y-6 sm:grid-cols-2 md:gap-x-6 lg:grid-cols-3 xl:grid-cols-4 \">\n\t\t\t{works.map((work) => (\n\t\t\t\t<div key={work.id}>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={work.url}\n\t\t\t\t\t\tclassName=\"group mb-2 block w-full overflow-hidden rounded-lg bg-gray-100\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`${process.env.GATSBY_SUPABASE_PROJECT_URL}/storage/v1/object/public/${work.image[0]}`}\n\t\t\t\t\t\t\talt={work.name}\n\t\t\t\t\t\t\tclassName=\"h-full w-full object-cover object-center transition duration-200\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</a>\n\n\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t<span className=\"text-gray-500\">\n\t\t\t\t\t\t\t{work.date.split(\"-\").slice(0, 2).join(\"-\")}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={work.url}\n\t\t\t\t\t\t\tclassName=\"text-lg font-bold text-gray-800 transition duration-100 hover:text-gray-500 lg:text-xl\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{work.name}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default WorksGrid;\n","import type { HeadFC, PageProps } from \"gatsby\";\nimport React from \"react\";\n\nimport WorksGrid from \"../components/worksGrid2\";\nimport Header from \"../components/header\";\n\nconst Works2Page: React.FC<PageProps> = () => {\n\treturn (\n\t\t<div className=\"min-h-screen bg-secondary py-6 sm:py-8 font-caviardreams\">\n\t\t\t<div className=\"mx-auto max-w-screen-2xl px-4 md:px-8\">\n\t\t\t\t<div className=\"mb-4 text-5xl font-bold sm:text-6xl md:mb-6 text-works grid-cols-2 grid\">\n\t\t\t\t\t<h1 className=\"mb-6 col-span-1 flex items-center\">Works</h1>\n\t\t\t\t\t<div className=\"mb-6 flex items-end justify-between gap-4 col-span-1\">\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<WorksGrid />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Works2Page;\nexport const Head: HeadFC = () => <title>isshin â€” Works</title>;\n","import { supabase } from \"./supabase\";\n\ninterface addWorkProps {\n\tworkName: string;\n\tdate: string;\n\turl: string;\n\tdescription: string;\n\timages: File[];\n}\n\nexport const database = () => {\n\tconst addWork = async ({\n\t\tworkName,\n\t\tdate,\n\t\turl,\n\t\tdescription,\n\t\timages,\n\t}: addWorkProps) => {\n\t\ttry {\n\t\t\tconst { data: id_data, error: id_error } = await supabase\n\t\t\t\t.from(\"works\")\n\t\t\t\t.select(\"id\")\n\t\t\t\t.order(\"id\", { ascending: false })\n\t\t\t\t.limit(1);\n\t\t\tif (id_error) {\n\t\t\t\tthrow new Error(`Error fetching max work id: ${id_error.message}`);\n\t\t\t}\n\t\t\tconst folder_name = ((id_data?.[0]?.id || 0) + 1).toString();\n\n\t\t\tconsole.log(id_data);\n\t\t\tconsole.log(folder_name);\n\n\t\t\tconst uploadData: any[] | null = [];\n\t\t\tconst uploadPromises = images.map(async (image, index) => {\n\t\t\t\tconst { data, error } = await supabase.storage\n\t\t\t\t\t.from(\"assets\")\n\t\t\t\t\t.upload(`works/${folder_name}/${index}`, image);\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow new Error(`Error uploading image: ${error.message}`);\n\t\t\t\t}\n\t\t\t\tuploadData.push(data);\n\t\t\t});\n\n\t\t\tawait Promise.all(uploadPromises);\n\n\t\t\tconsole.log(uploadData);\n\t\t\tconst imagePathList: string[] = uploadData.map((item) => item.fullPath);\n\t\t\tconsole.log(imagePathList);\n\n\t\t\tconst { data, error } = await supabase\n\t\t\t\t.from(\"works\")\n\t\t\t\t.insert([\n\t\t\t\t\t{\n\t\t\t\t\t\tname: workName,\n\t\t\t\t\t\tdate: date,\n\t\t\t\t\t\timage: imagePathList,\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\tdescription: description,\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.select();\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(`Error uploading works: ${error.message}`);\n\t\t\t}\n\t\t\tconsole.log(data);\n\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"An error occurred:\", (error as Error).message);\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tconst getWorks = async () => {\n\t\ttry {\n\t\t\tconst { data, error } = await supabase.from(\"works\").select(\"*\");\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(`Error uploading image: ${error.message}`);\n\t\t\t}\n\t\t\tconsole.log(data)\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"An error occurred:\", (error as Error).message);\n\t\t}\n\t};\n\n\treturn {\n\t\taddWork,\n\t\tgetWorks,\n\t};\n};\n","interface Work {\n\tdate: string;\n}\n\nexport const sortByDate = (a: Work, b: Work) => {\n\treturn new Date(b.date).getTime() - new Date(a.date).getTime();\n};\n"],"names":["_ref","colors","location","useLocation","pathname","replace","React","className","Link","to","WorksGrid","works","setWorks","useState","useEffect","async","getWorks","database","data","sort","sortByDate","error","console","message","fetchData","map","work","key","id","href","url","src","image","alt","name","date","split","slice","join","Works2Page","Header","Head","addWork","workName","description","images","_id_data$","id_data","id_error","supabase","from","select","order","ascending","limit","Error","folder_name","toString","log","uploadData","uploadPromises","index","storage","upload","push","Promise","all","imagePathList","item","fullPath","insert","a","b","Date","getTime"],"sourceRoot":""}