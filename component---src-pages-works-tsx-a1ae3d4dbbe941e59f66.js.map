{"version":3,"file":"component---src-pages-works-tsx-a1ae3d4dbbe941e59f66.js","mappings":"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","sources":["webpack://isshin/./src/components/header.tsx","webpack://isshin/./src/components/worksGrid.tsx","webpack://isshin/./src/pages/works.tsx","webpack://isshin/./src/utils/database.ts","webpack://isshin/./src/utils/sort.ts"],"sourcesContent":["import React from \"react\";\n\ninterface HeaderProps {\n\tcolors?: string[];\n}\n\nconst Header: React.FC<HeaderProps> = ({ colors = [] }) => {\n\treturn (\n\t\t<>\n\t\t\t<div className=\"px-4 py-2 text-center text-sm font-semibold text-gray-500 outline-none ring-indigo-300 transition duration-100 hover:bg-gray-100 focus-visible:ring active:bg-gray-200 md:px-8 md:py-3 md:text-base\">\n\t\t\t\t<div\n\t\t\t\t\tclassName={`mb-4 font-bold uppercase tracking-widest ${\n\t\t\t\t\t\tcolors[0] || \"text-works\"\n\t\t\t\t\t} text-right`}\n\t\t\t\t>\n\t\t\t\t\t<a href=\"/works\">works</a>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`mb-4 font-bold uppercase tracking-widest ${\n\t\t\t\t\t\tcolors[1] || \"text-about\"\n\t\t\t\t\t} text-right`}\n\t\t\t\t>\n\t\t\t\t\t<a href=\"/about\">about</a>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`mb-4 font-bold uppercase tracking-widest ${\n\t\t\t\t\t\tcolors[2] || \"text-about\"\n\t\t\t\t\t} text-right`}\n\t\t\t\t>\n\t\t\t\t\t<a>contact</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport { database } from \"../utils/database\";\nimport { sortByDate } from \"../utils/sort\";\n\nconst WorksGrid = () => {\n\tconst [works, setWorks] = useState<any[]>([]);\n\tconst [selectedWork, setSelectedWork] = useState<any | null>(null);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst { getWorks } = database();\n\t\t\t\tconst data = await getWorks();\n\t\t\t\tsetWorks(data.sort(sortByDate));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Error fetching works:\", (error as Error).message);\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\t}, []);\n\n\tconst handleImageClick = (work: any) => {\n\t\tsetSelectedWork(work);\n\t};\n\n\tconst closeOverlay = () => {\n\t\tsetSelectedWork(null);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div\n\t\t\t\tclassName={`grid sm:grid-cols-2 lg:grid-cols-3 ${\n\t\t\t\t\tselectedWork ? \"opacity-10 pointer-events-none\" : \"\"\n\t\t\t\t}`}\n\t\t\t>\n\t\t\t\t{works.map((work) => (\n\t\t\t\t\t<div key={work.id} className=\"relative\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => handleImageClick(work)}\n\t\t\t\t\t\t\tclassName=\"group block w-full overflow-hidden bg-gray-100 relative\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={`${process.env.GATSBY_SUPABASE_PROJECT_URL}/storage/v1/object/public/${work.image[0]}`}\n\t\t\t\t\t\t\t\talt={work.name}\n\t\t\t\t\t\t\t\tclassName=\"h-full w-full object-cover object-center transition duration-200\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span className=\"hover:backdrop-brightness-90 absolute top-0 left-0 right-0 bottom-0 flex flex-col text-white opacity-0 transition-opacity duration-200 hover:opacity-100 p-4\">\n\t\t\t\t\t\t\t\t<span className=\"text-primary\">\n\t\t\t\t\t\t\t\t\t{work.date.split(\"-\").slice(0, 2).join(\"-\")}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\thref={work.url}\n\t\t\t\t\t\t\t\t\tclassName=\"text-lg font-bold text-primary transition duration-100 hover:text-gray-500 lg:text-xl\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{work.name}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{selectedWork && (\n\t\t\t\t<div\n\t\t\t\t\tonClick={closeOverlay}\n\t\t\t\t\tclassName=\"fixed top-8 left-0 w-full h-full bg-secondary py-2 lg:py-2 font-caviardreams\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"mx-auto max-w-screen-lg px-4 md:px-8 \">\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<div className=\"relative mb-6 overflow-hidden rounded-lg bg-gray-100 md:mb-8\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={`${process.env.GATSBY_SUPABASE_PROJECT_URL}/storage/v1/object/public/${selectedWork.image[0]}`}\n\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\tclassName=\"h-full w-full object-cover object-center\"\n\t\t\t\t\t\t\t\talt=\"about\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"md:py-8\">\n\t\t\t\t\t\t\t<div className=\"mb-2 md:mb-3\">\n\t\t\t\t\t\t\t\t<span className=\"mb-0.5 inline-block text-gray-500\">\n\t\t\t\t\t\t\t\t\t{selectedWork.date}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<h2 className=\"text-2xl font-bold text-gray-800 lg:text-3xl\">\n\t\t\t\t\t\t\t\t\t<a href={selectedWork.url}>{selectedWork.name}</a>\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/**\n\t\t\t\t\t\t\t * 後で考えるらしいから保留\n\t\t\t\t\t\t\t<div className=\"mt-10 md:mt-16 lg:mt-20\">\n\t\t\t\t\t\t\t\t<div className=\"mb-3 text-lg font-semibold text-gray-800\">\n\t\t\t\t\t\t\t\t\tDescription\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<p className=\"text-gray-500\">\n\t\t\t\t\t\t\t\t\t一応用意した<br/><br/>あああああああああ\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default WorksGrid;\n","import type { HeadFC, PageProps } from \"gatsby\";\nimport React from \"react\";\n\nimport WorksGrid from \"../components/worksGrid\";\nimport Header from \"../components/header\";\n\nconst WorksPage: React.FC<PageProps> = () => {\n\treturn (\n\t\t<div className=\"min-h-screen bg-secondary py-6 sm:py-8 font-caviardreams\">\n\t\t\t<div className=\"mx-auto max-w-screen-2xl px-4 md:px-8\">\n\t\t\t\t<div className=\"mb-4 text-5xl font-bold sm:text-6xl md:mb-6 text-works grid-cols-2 grid\">\n\t\t\t\t\t<h1 className=\"mb-6 col-span-1 flex items-center\">Works</h1>\n\t\t\t\t\t<div className=\"mb-6 flex items-end justify-between gap-4 col-span-1\">\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<WorksGrid />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default WorksPage;\nexport const Head: HeadFC = () => <title>isshin — Works</title>;\n","import { supabase } from \"./supabase\";\n\ninterface addWorkProps {\n\tworkName: string;\n\tdate: string;\n\turl: string;\n\tdescription: string;\n\timages: File[];\n}\n\nexport const database = () => {\n\tconst addWork = async ({\n\t\tworkName,\n\t\tdate,\n\t\turl,\n\t\tdescription,\n\t\timages,\n\t}: addWorkProps) => {\n\t\ttry {\n\t\t\tconst { data: id_data, error: id_error } = await supabase\n\t\t\t\t.from(\"works\")\n\t\t\t\t.select(\"id\")\n\t\t\t\t.order(\"id\", { ascending: false })\n\t\t\t\t.limit(1);\n\t\t\tif (id_error) {\n\t\t\t\tthrow new Error(`Error fetching max work id: ${id_error.message}`);\n\t\t\t}\n\t\t\tconst folder_name = ((id_data?.[0]?.id || 0) + 1).toString();\n\n\t\t\tconsole.log(id_data);\n\t\t\tconsole.log(folder_name);\n\n\t\t\tconst uploadData: any[] | null = [];\n\t\t\tconst uploadPromises = images.map(async (image, index) => {\n\t\t\t\tconst { data, error } = await supabase.storage\n\t\t\t\t\t.from(\"assets\")\n\t\t\t\t\t.upload(`works/${folder_name}/${index}`, image);\n\t\t\t\tif (error) {\n\t\t\t\t\tthrow new Error(`Error uploading image: ${error.message}`);\n\t\t\t\t}\n\t\t\t\tuploadData.push(data);\n\t\t\t});\n\n\t\t\tawait Promise.all(uploadPromises);\n\n\t\t\tconsole.log(uploadData);\n\t\t\tconst imagePathList: string[] = uploadData.map((item) => item.fullPath);\n\t\t\tconsole.log(imagePathList);\n\n\t\t\tconst { data, error } = await supabase\n\t\t\t\t.from(\"works\")\n\t\t\t\t.insert([\n\t\t\t\t\t{\n\t\t\t\t\t\tname: workName,\n\t\t\t\t\t\tdate: date,\n\t\t\t\t\t\timage: imagePathList,\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\tdescription: description,\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.select();\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(`Error uploading works: ${error.message}`);\n\t\t\t}\n\t\t\tconsole.log(data);\n\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"An error occurred:\", (error as Error).message);\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tconst getWorks = async () => {\n\t\ttry {\n\t\t\tconst { data, error } = await supabase.from(\"works\").select(\"*\");\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(`Error uploading image: ${error.message}`);\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"An error occurred:\", (error as Error).message);\n\t\t}\n\t};\n\n\treturn {\n\t\taddWork,\n\t\tgetWorks,\n\t};\n};\n","interface Work {\n\tdate: string;\n}\n\nexport const sortByDate = (a: Work, b: Work) => {\n\treturn new Date(b.date).getTime() - new Date(a.date).getTime();\n};\n"],"names":["_ref","colors","React","className","href","WorksGrid","works","setWorks","useState","selectedWork","setSelectedWork","useEffect","async","getWorks","database","data","sort","sortByDate","error","console","message","fetchData","map","work","key","id","onClick","handleImageClick","src","image","alt","name","date","split","slice","join","url","closeOverlay","loading","WorksPage","Header","Head","addWork","workName","description","images","_id_data$","id_data","id_error","supabase","from","select","order","ascending","limit","Error","folder_name","toString","log","uploadData","uploadPromises","index","storage","upload","push","Promise","all","imagePathList","item","fullPath","insert","a","b","Date","getTime"],"sourceRoot":""}